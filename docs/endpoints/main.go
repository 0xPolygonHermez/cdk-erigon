package main

import (
	"fmt"
	"os"
	"reflect"
	"sort"
	"text/template"
	"unicode"
	"unicode/utf8"

	"github.com/ledgerwatch/erigon/cmd/rpcdaemon/commands"
)

const disclaimer = `DO NOT EDIT THIS FILE.
This document was auto generated by [./main.go](./main.go) based on the interfaces the JSON-RPC server use to expose the public endpoints
For more details read the [./README.md](./README.md)`

type Document struct {
	Disclaimer     string
	EndpointGroups []keyValue
}

type keyValue struct {
	Key   any
	Value any
}

func main() {
	apiInterfaces := []keyValue{
		{"admin", (*commands.AdminAPI)(nil)},
		{"bor", (*commands.BorAPI)(nil)},
		{"debug", (*commands.PrivateDebugAPI)(nil)},
		{"engine", (*commands.EngineAPI)(nil)},
		{"erigon", (*commands.ErigonAPI)(nil)},
		{"eth", (*commands.EthAPI)(nil)},
		{"graphql", (*commands.GraphQLAPI)(nil)},
		{"net", (*commands.NetAPI)(nil)},
		{"otterscan", (*commands.OtterscanAPI)(nil)},
		{"parity", (*commands.ParityAPI)(nil)},
		{"trace", (*commands.TraceAPI)(nil)},
		{"txpool", (*commands.TxPoolAPI)(nil)},
		{"web3", (*commands.Web3API)(nil)},
		{"zkevm", (*commands.ZkEvmAPI)(nil)},
	}

	endpointGroups := []keyValue{}
	for _, apiInterface := range apiInterfaces {
		apiPrefix := apiInterface.Key
		apiInterfaceType := apiInterface.Value

		apiEndpoints := []string{}
		interfaceType := reflect.TypeOf(apiInterfaceType).Elem()
		for methodIndex := 0; methodIndex < interfaceType.NumMethod(); methodIndex++ {
			methodName := interfaceType.Method(methodIndex).Name
			methodName = firstToLower(methodName)
			endpointName := fmt.Sprintf("%s_%s", apiPrefix, methodName)
			apiEndpoints = append(apiEndpoints, endpointName)
		}

		sort.Slice(apiEndpoints, func(i, j int) bool {
			return apiEndpoints[i] < apiEndpoints[j]
		})
		endpointGroup := keyValue{Key: apiPrefix, Value: apiEndpoints}

		endpointGroups = append(endpointGroups, endpointGroup)
	}

	fileName := "endpoints.md"
	fmt.Println(os.Args)
	if len(os.Args) > 1 {
		fileName = os.Args[1]
	}

	f, err := createOrOpen(fileName)
	checkErr(err)

	t := template.Must(template.New("template.md").ParseFiles("template.md"))
	err = t.Execute(f, Document{disclaimer, endpointGroups})
	checkErr(err)
}

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

func createOrOpen(name string) (*os.File, error) {
	if _, err := os.Stat(name); err == nil {
		os.Remove(name)
	}
	return os.Create(name)
}

func firstToLower(s string) string {
	r, size := utf8.DecodeRuneInString(s)
	if r == utf8.RuneError && size <= 1 {
		return s
	}
	lc := unicode.ToLower(r)
	if r == lc {
		return s
	}
	return string(lc) + s[size:]
}
